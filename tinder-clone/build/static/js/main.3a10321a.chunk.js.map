{"version":3,"sources":["Components/Header/Header.js","firebase.js","Components/Card/Card.js","Components/SwipeButtons/SwipeButtons.js","Components/Chat/Chat.js","Components/Chats/Chats.js","Components/ChatScreen/ChatScreen.js","App.js","serviceWorker.js","index.js"],"names":["Header","backButton","history","useHistory","className","IconButton","onClick","replace","ArrowBackIos","fontSize","Person","to","src","alt","Forum","database","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","Card","useState","people","setPeople","useEffect","unsubscribe","collection","onSnapshot","snapshot","docs","map","doc","data","person","key","name","preventSwipe","style","backgroundImage","url","SwipeButtons","Replay","Close","StarRate","Favorite","FlashOn","Chat","message","timestamp","profilePic","Avatar","Chats","ChatScreen","input","setInput","image","messages","setMessages","value","onChange","e","target","placeholder","type","preventDefault","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"ibA2CeA,MAjCf,YAAiC,IAAfC,EAAc,EAAdA,WACRC,EAAUC,cAChB,OACI,yBAAKC,UAAU,UAEPH,EACI,kBAACI,EAAA,EAAD,CAAYC,QAAS,kBAAMJ,EAAQK,QAAQN,KACvC,kBAACO,EAAA,EAAD,CAAcJ,UAAU,eAAeK,SAAS,WAGhD,kBAACJ,EAAA,EAAD,KACI,kBAACK,EAAA,EAAD,CAAQN,UAAU,eAAeK,SAAS,WAM1D,kBAAC,IAAD,CAAME,GAAG,KACL,yBACIP,UAAU,eACVQ,IAAI,wEACJC,IAAI,iBAGZ,kBAAC,IAAD,CAAMF,GAAG,SACL,kBAACN,EAAA,EAAD,KACI,kBAACS,EAAA,EAAD,CAAOV,UAAU,eAAeK,SAAS,c,yCCtB9CM,E,OAHKC,EAASC,cATN,CACnBC,OAAQ,0CACRC,WAAY,sCACZC,YAAa,6CACbC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,8CAGkBC,YC6BdC,MApCf,WAAiB,IAAD,EACgBC,mBAAS,IADzB,mBACLC,EADK,KACGC,EADH,KAcZ,OAZAC,qBAAU,WACN,IAAMC,EAAchB,EACfiB,WAAW,UACXC,YAAW,SAAAC,GAAQ,OAChBL,EAAUK,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,cAG/C,OAAO,WACHP,OAEL,IAGC,yBAAK3B,UAAU,QACX,yBAAKA,UAAU,mBAEPwB,EAAOQ,KAAI,SAAAG,GAAM,OACb,kBAAC,IAAD,CACInC,UAAU,QACVoC,IAAKD,EAAOE,KACZC,aAAc,CAAC,KAAM,SAGrB,yBAAKC,MAAO,CAAEC,gBAAgB,OAAD,OAASL,EAAOM,IAAhB,MAA0BzC,UAAU,eAC7D,wBAAIA,UAAU,cAAcmC,EAAOE,c,oDCEpDK,MAtBf,WACI,OACI,yBAAK1C,UAAU,gBACX,kBAACC,EAAA,EAAD,CAAYD,UAAU,wBAClB,kBAAC2C,EAAA,EAAD,CAAQtC,SAAS,WAErB,kBAACJ,EAAA,EAAD,CAAYD,UAAU,sBAClB,kBAAC4C,EAAA,EAAD,CAAOvC,SAAS,WAEpB,kBAACJ,EAAA,EAAD,CAAYD,UAAU,sBAClB,kBAAC6C,EAAA,EAAD,CAAUxC,SAAS,WAEvB,kBAACJ,EAAA,EAAD,CAAYD,UAAU,uBAClB,kBAAC8C,EAAA,EAAD,CAAUzC,SAAS,WAEvB,kBAACJ,EAAA,EAAD,CAAYD,UAAU,0BAClB,kBAAC+C,EAAA,EAAD,CAAS1C,SAAS,a,uBCPnB2C,MAff,YAAyD,IAAzCX,EAAwC,EAAxCA,KAAMY,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,WACtC,OACI,kBAAC,IAAD,CAAM5C,GAAE,gBAAW8B,IACf,yBAAKrC,UAAU,QACX,kBAACoD,EAAA,EAAD,CAAQpD,UAAU,cAAcS,IAAK4B,EAAM7B,IAAK2C,IAChD,yBAAKnD,UAAU,iBACX,4BAAKqC,GACL,2BAAIY,IAER,uBAAGjD,UAAU,mBAAmBkD,MCqBjCG,MA/Bf,WACI,OACI,yBAAKrD,UAAU,SACX,kBAAC,EAAD,CACIqC,KAAK,QACLY,QAAQ,+BACRC,UAAU,iBACVC,WAAW,kGAEf,kBAAC,EAAD,CACId,KAAK,QACLY,QAAQ,yBACRC,UAAU,iBACVC,WAAW,gFAEf,kBAAC,EAAD,CACId,KAAK,SACLY,QAAQ,OACRC,UAAU,aACVC,WAAW,8HAEf,kBAAC,EAAD,CACId,KAAK,UACLY,QAAQ,sCACRC,UAAU,iBACVC,WAAW,4G,cC2BZG,MApDf,WACI,IADkB,EAMQ/B,mBAAS,IANjB,mBAMXgC,EANW,KAMJC,EANI,OAOcjC,mBAAS,CACrC,CACIc,KAAM,QACNoB,MAAO,8EACPR,QAAS,2BAEb,CACIZ,KAAM,QACNoB,MAAO,8EACPR,QAAS,mBAEb,CACIA,QAAS,4BAnBC,mBAOXS,EAPW,KAODC,EAPC,KAsBlB,OACI,yBAAK3D,UAAU,cACX,uBAAGA,UAAU,yBAAb,wCACC0D,EAAS1B,KAAI,SAAAiB,GAAO,OACjBA,EAAQZ,KACJ,yBAAKrC,UAAU,uBACX,kBAACoD,EAAA,EAAD,CAAQpD,UAAU,oBAAoBS,IAAKwC,EAAQZ,KAAM7B,IAAKyC,EAAQQ,QACtE,uBAAGzD,UAAU,oBAAoBiD,EAAQA,UAGzC,yBAAKjD,UAAU,uBACX,uBAAGA,UAAU,wBAAwBiD,EAAQA,aAM7D,0BAAMjD,UAAU,qBACZ,2BACI4D,MAAOL,EACPM,SAAU,SAACC,GAAD,OAAON,EAASM,EAAEC,OAAOH,QACnC5D,UAAU,yBACVgE,YAAY,oBACZC,KAAK,SACT,4BAAQA,KAAK,SAAS/D,QA7Cf,SAAA4D,GACfA,EAAEI,iBACFP,EAAY,GAAD,mBAAKD,GAAL,CAAe,CAAET,QAASM,MACrCC,EAAS,KA0C0CxD,UAAU,sBAArD,WCbDmE,MAxBf,WACE,OACE,yBAAKnE,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoE,KAAK,iBACV,kBAAC,EAAD,CAAQvE,WAAW,UACnB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOuE,KAAK,SACV,kBAAC,EAAD,CAAQvE,WAAW,MACnB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOuE,KAAK,KACV,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,WCjBQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMrC,c","file":"static/js/main.3a10321a.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\nimport {\n    Person,\n    Forum,\n    ArrowBackIos\n} from '@material-ui/icons';\nimport { IconButton } from '@material-ui/core';\nimport { Link, useHistory } from 'react-router-dom';\n\nfunction Header({ backButton }) {\n    const history = useHistory();\n    return (\n        <div className=\"header\">\n            {\n                backButton ? (\n                    <IconButton onClick={() => history.replace(backButton)}>\n                        <ArrowBackIos className=\"header__icon\" fontSize='large' />\n                    </IconButton>\n                ) : (\n                        <IconButton>\n                            <Person className=\"header__icon\" fontSize='large' />\n                        </IconButton>\n\n                    )\n            }\n\n            <Link to='/'>\n                <img\n                    className=\"header__logo\"\n                    src=\"https://seeklogo.com/images/T/tinder-logo-FAAE852EC0-seeklogo.com.png\"\n                    alt=\"Tinder Logo\"\n                />\n            </Link>\n            <Link to='/chat'>\n                <IconButton>\n                    <Forum className=\"header__icon\" fontSize='large' />\n                </IconButton>\n            </Link>\n        </div>\n    )\n}\n\nexport default Header;\n","import firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyABxPpojYhnmIyXk9mG0QdoEXv2UxwpedA\",\n    authDomain: \"kareem-tinder-clone.firebaseapp.com\",\n    databaseURL: \"https://kareem-tinder-clone.firebaseio.com\",\n    projectId: \"kareem-tinder-clone\",\n    storageBucket: \"kareem-tinder-clone.appspot.com\",\n    messagingSenderId: \"885251383809\",\n    appId: \"1:885251383809:web:0e441cb2fff1fbafb99600\"\n};\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst database = firebaseApp.firestore();\n\nexport default database;","import React, { useState, useEffect } from 'react';\nimport './Card.css';\nimport TinderCard from 'react-tinder-card';\nimport database from '../../firebase';\n\nfunction Card() {\n    const [people, setPeople] = useState([]);\n    useEffect(() => {\n        const unsubscribe = database\n            .collection('people')\n            .onSnapshot(snapshot => (\n                setPeople(snapshot.docs.map(doc => doc.data()))\n            ));\n\n        return () => {\n            unsubscribe();\n        }\n    }, []);\n\n    return (\n        <div className=\"card\">\n            <div className=\"card__container\">\n                {\n                    people.map(person => (\n                        <TinderCard\n                            className='swipe'\n                            key={person.name}\n                            preventSwipe={['up', 'down']}\n\n                        >\n                            <div style={{ backgroundImage: `url(${person.url})` }} className='card__infos'>\n                                <h3 className=\"card__name\">{person.name}</h3>\n                            </div>\n                        </TinderCard>\n                    ))\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Card;\n","import React from 'react';\nimport './SwipeButtons.css';\nimport {\n    Replay,\n    Close,\n    StarRate,\n    Favorite,\n    FlashOn\n} from '@material-ui/icons';\nimport { IconButton } from '@material-ui/core';\n\nfunction SwipeButtons() {\n    return (\n        <div className=\"swipeButtons\">\n            <IconButton className=\"swipeButtons__repeat\">\n                <Replay fontSize=\"large\" />\n            </IconButton>\n            <IconButton className=\"swipeButtons__left\">\n                <Close fontSize=\"large\" />\n            </IconButton>\n            <IconButton className=\"swipeButtons__star\">\n                <StarRate fontSize=\"large\" />\n            </IconButton>\n            <IconButton className=\"swipeButtons__right\">\n                <Favorite fontSize=\"large\" />\n            </IconButton>\n            <IconButton className=\"swipeButtons__lighting\">\n                <FlashOn fontSize=\"large\" />\n            </IconButton>\n        </div>\n    )\n}\n\nexport default SwipeButtons;\n","import React from 'react';\nimport './Chat.css';\nimport { Avatar } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\nfunction Chat({ name, message, timestamp, profilePic }) {\n    return (\n        <Link to={`/chat/${name}`}>\n            <div className=\"chat\">\n                <Avatar className=\"chat__image\" alt={name} src={profilePic} />\n                <div className=\"chat__details\">\n                    <h2>{name}</h2>\n                    <p>{message}</p>\n                </div>\n                <p className=\"chat__timestamp\">{timestamp}</p>\n            </div>\n        </Link>\n    )\n}\n\nexport default Chat;\n","import React from 'react';\nimport './Chats.css';\nimport Chat from '../Chat/Chat';\n\nfunction Chats() {\n    return (\n        <div className=\"chats\">\n            <Chat\n                name='Sarah'\n                message='Hey how are you 😃'\n                timestamp='35 minutes ago'\n                profilePic='https://bookingagentinfo.com/wp-content/uploads/2020/06/Sarah-Graysun-Contact-Information.jpg'\n            />\n            <Chat\n                name='Ellen'\n                message=\"What's up?♥️\"\n                timestamp='55 minutes ago'\n                profilePic='https://s31242.pcdn.co/wp-content/uploads/2020/07/ellen-degeneres-show.jpeg'\n            />\n            <Chat\n                name='Sandra'\n                message='Ola!'\n                timestamp='3 days ago'\n                profilePic='https://1zl13gzmcsu3l9yq032yyf51-wpengine.netdna-ssl.com/wp-content/uploads/2020/02/GettyImages-1197827373-1-1068x603.jpg'\n            />\n            <Chat\n                name='Natasha'\n                message='Oops there is he is... 🐕'\n                timestamp='35 minutes ago'\n                profilePic='https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcR3C-GJtjdLUtli0VVJIYviakO8mHQ6WTdHDg&usqp=CAU'\n            />\n        </div>\n    )\n}\n\nexport default Chats;\n","import React, { useState } from 'react';\nimport './ChatScreen.css';\nimport { Avatar } from '@material-ui/core';\n\nfunction ChatScreen() {\n    const handleSend = e => {\n        e.preventDefault();\n        setMessages([...messages, { message: input }]);\n        setInput('');\n    }\n    const [input, setInput] = useState('');\n    const [messages, setMessages] = useState([\n        {\n            name: 'Ellen',\n            image: 'https://s31242.pcdn.co/wp-content/uploads/2020/07/ellen-degeneres-show.jpeg',\n            message: \"What's up? ♥️\"\n        },\n        {\n            name: 'Ellen',\n            image: 'https://s31242.pcdn.co/wp-content/uploads/2020/07/ellen-degeneres-show.jpeg',\n            message: \"How it's going!\"\n        },\n        {\n            message: 'Hi! how are you Ellen?'\n        }\n    ]);\n    return (\n        <div className=\"chatScreen\">\n            <p className=\"chatScreen__timestamp\">YOU MATCHED WITH ELLEN ON 13/09/2020</p>\n            {messages.map(message => (\n                message.name ? (\n                    <div className=\"chatScreen__message\">\n                        <Avatar className=\"chatScreen__image\" alt={message.name} src={message.image} />\n                        <p className=\"chatScreen__text\">{message.message}</p>\n                    </div>\n                ) : (\n                        <div className=\"chatScreen__message\">\n                            <p className=\"chatScreen__textUser\">{message.message}</p>\n                        </div>\n                    )\n\n            ))\n            }\n            <form className='chatScreen__input'>\n                <input\n                    value={input}\n                    onChange={(e) => setInput(e.target.value)}\n                    className=\"chatScreen__inputField\"\n                    placeholder=\"Type a message...\"\n                    type='text' />\n                <button type='submit' onClick={handleSend} className=\"chatScreen__button\">Send</button>\n            </form>\n        </div>\n    )\n}\n\nexport default ChatScreen;\n","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport Header from './Components/Header/Header';\nimport Card from './Components/Card/Card';\nimport SwipeButtons from './Components/SwipeButtons/SwipeButtons';\nimport Chats from './Components/Chats/Chats';\nimport ChatScreen from './Components/ChatScreen/ChatScreen';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Router>\n        <Switch>\n          <Route path='/chat/:person'>\n            <Header backButton='/chat' />\n            <ChatScreen />\n          </Route>\n          <Route path='/chat'>\n            <Header backButton='/' />\n            <Chats />\n          </Route>\n          <Route path=\"/\">\n            <Header />\n            <Card />\n            <SwipeButtons />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}